#  Copyright 2025 Google LLC
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
import datetime
import subprocess
from pathlib import Path

gemini_downselect = [
    "qualtran/bloqs/arithmetic/addition.py",
    "qualtran/bloqs/arithmetic/multiplication.py",
    "qualtran/bloqs/arithmetic/comparison.py",
    "qualtran/bloqs/basic_gates/hadamard.py",
    "qualtran/bloqs/basic_gates/toffoli.py",
    "qualtran/bloqs/bookkeeping/allocate.py",
    "qualtran/bloqs/bookkeeping/join.py",
    "qualtran/bloqs/data_loading/qrom.py",
    "qualtran/bloqs/state_preparation/prepare_uniform_superposition.py",
    "qualtran/bloqs/state_preparation/state_preparation_alias_sampling.py",
    "qualtran/bloqs/qft/qft_text_book.py",
    "qualtran/bloqs/rotations/hamming_weight_phasing.py",
    "qualtran/bloqs/block_encoding/unitary.py",
    "qualtran/bloqs/block_encoding/linear_combination.py",
    "qualtran/bloqs/block_encoding/product.py",
    "qualtran/bloqs/qubitization/qubitization_walk_operator.py",
    "qualtran/bloqs/phase_estimation/text_book_qpe.py",
    "qualtran/bloqs/chemistry/thc/prepare.py",
    "qualtran/bloqs/chemistry/hubbard_model/qubitization/select_hubbard.py",
    "qualtran/bloqs/mcmt/and_bloq.py",
]
# This small(er) list of files was generated by asking Gemini which files were most relevant
# for it. You can include additional Python files if you have spare token budget.


includes = [*gemini_downselect, 'docs/**/*.md']
include_str = ','.join(includes)

today_str = datetime.date.today().isoformat()
out_fn = f'dev_tools/repomix/qualtran-repomix-{today_str}.md'

cmd = ['npx', 'repomix', '--no-gitignore', '--include', include_str, '--output', out_fn]


def get_git_root() -> Path:
    """Get the root git repository path."""
    cp = subprocess.run(
        ['git', 'rev-parse', '--show-toplevel'],
        capture_output=True,
        universal_newlines=True,
        check=True,
    )
    path = Path(cp.stdout.strip()).absolute()
    assert path.exists()
    return path


subprocess.run(cmd, check=True, cwd=get_git_root())
