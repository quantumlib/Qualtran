"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

Copyright 2024 Google LLC
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
https://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import qualtran.protos.args_pb2
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ECPoint(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    X_FIELD_NUMBER: builtins.int
    Y_FIELD_NUMBER: builtins.int
    MOD_FIELD_NUMBER: builtins.int
    CURVE_A_FIELD_NUMBER: builtins.int
    @property
    def x(self) -> qualtran.protos.args_pb2.IntOrSympy: ...
    @property
    def y(self) -> qualtran.protos.args_pb2.IntOrSympy: ...
    @property
    def mod(self) -> qualtran.protos.args_pb2.IntOrSympy: ...
    @property
    def curve_a(self) -> qualtran.protos.args_pb2.IntOrSympy: ...
    def __init__(
        self,
        *,
        x: qualtran.protos.args_pb2.IntOrSympy | None = ...,
        y: qualtran.protos.args_pb2.IntOrSympy | None = ...,
        mod: qualtran.protos.args_pb2.IntOrSympy | None = ...,
        curve_a: qualtran.protos.args_pb2.IntOrSympy | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_curve_a", b"_curve_a", "curve_a", b"curve_a", "mod", b"mod", "x", b"x", "y", b"y"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_curve_a", b"_curve_a", "curve_a", b"curve_a", "mod", b"mod", "x", b"x", "y", b"y"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_curve_a", b"_curve_a"]) -> typing_extensions.Literal["curve_a"] | None: ...

global___ECPoint = ECPoint
